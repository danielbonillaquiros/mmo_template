{"version":3,"sources":["../../src/game_manager/GameManager.js"],"names":["GameManager","io","spawners","chests","monsters","players","items","playerLocations","chestLocations","monsterLocations","itemLocations","itemData","locations","parseMapData","setupEventListeners","setupSpawners","levelData","layers","forEach","layer","name","objects","obj","push","x","y","properties","spawner","on","socket","console","log","id","emit","token","frame","process","env","BYPASS_AUTH","decoded","jwt","verify","JWT_SECRET","user","spawnPlayer","broadcast","error","message","email","ChatModel","create","playerData","flipX","playerAttacking","currentDirection","itemId","removeItem","canPickupItem","addItem","spawnerId","removeObject","chestId","gold","updateGold","monsterId","attack","playerAttackValue","loseHealth","health","updateHealth","playerAttacked","parseInt","respawn","attackedPlayerId","to","config","spawnInterval","limit","spawnerType","SpawnerType","CHEST","Object","keys","key","Spawner","addChest","bind","deleteChest","MONSTER","addMonster","deleteMonster","moveMonsters","ITEM","deleteItem","playerId","player","PlayerModel","chest","monster","item"],"mappings":"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","sourcesContent":["import { v4 } from 'uuid';\nimport jwt from 'jsonwebtoken';\nimport PlayerModel from './PlayerModel';\nimport * as levelData from '../../public/assets/level/large_level.json';\nimport Spawner from './Spawner';\nimport { SpawnerType } from './utils';\nimport ChatModel from '../models/ChatModel';\nimport * as itemData from '../../public/assets/level/tools.json';\n\nexport default class GameManager {\n  constructor(io) {\n    this.io = io;\n    this.spawners = {};\n    this.chests = {};\n    this.monsters = {};\n    this.players = {};\n    this.items = {};\n\n    this.playerLocations = [];\n    this.chestLocations = {};\n    this.monsterLocations = {};\n    this.itemLocations = itemData.locations;\n  }\n\n  setup() {\n    this.parseMapData();\n    this.setupEventListeners();\n    this.setupSpawners();\n  }\n\n  parseMapData() {\n    this.levelData = levelData;\n    this.levelData.layers.forEach((layer) => {\n      if (layer.name === 'player_locations') {\n        layer.objects.forEach((obj) => {\n          this.playerLocations.push([obj.x, obj.y]);\n        });\n      } else if (layer.name === 'monster_locations') {\n        layer.objects.forEach((obj) => {\n          if (this.monsterLocations[obj.properties.spawner]) {\n            this.monsterLocations[obj.properties.spawner].push([obj.x, obj.y]);\n          } else {\n            this.monsterLocations[obj.properties.spawner] = [[obj.x, obj.y]];\n          }\n        });\n      } else if (layer.name === 'chest_locations') {\n        layer.objects.forEach((obj) => {\n          if (this.chestLocations[obj.properties.spawner]) {\n            this.chestLocations[obj.properties.spawner].push([obj.x, obj.y]);\n          } else {\n            this.chestLocations[obj.properties.spawner] = [[obj.x, obj.y]];\n          }\n        });\n      }\n    });\n  }\n\n  setupEventListeners() {\n    this.io.on('connection', (socket) => {\n      // player disconnected\n      socket.on('disconnect', () => {\n        console.log('player disconnected from our game');\n        console.log(socket.id);\n\n        // delete user data from the server\n        delete this.playerLocations[socket.id];\n\n        // emit a message to all players to remove this player\n        this.io.emit('player_disconnect', socket.id);\n      });\n\n      socket.on('newPlayer', (token, frame) => {\n        try {\n          let name = v4();\n          if (process.env.BYPASS_AUTH !== 'ENABLED') {\n            // validate token, if valid send game information, else reject login\n            const decoded = jwt.verify(token, process.env.JWT_SECRET);\n\n            // get player's name\n            ({ name } = decoded.user);\n          }\n\n          // create a new Player\n          this.spawnPlayer(socket.id, name, frame);\n\n          // send the players object to the new player\n          socket.emit('currentPlayers', this.players);\n\n          // send the monsters object to the new player\n          socket.emit('currentMonsters', this.monsters);\n\n          // send the chests object to the new player\n          socket.emit('currentChests', this.chests);\n\n          // send the items object to the new player\n          socket.emit('current-items', this.items);\n\n          // inform the other players of the new player that joined\n          socket.broadcast.emit('spawnPlayer', this.players[socket.id]);\n        } catch (error) {\n          console.log(error.message);\n          socket.emit('invalidToken');\n        }\n      });\n\n      socket.on('send-message', async (message, token) => {\n        try {\n          let name = v4();\n          let email = '';\n\n          if (process.env.BYPASS_AUTH !== 'ENABLED') {\n            // validate token, if valid send game information, else reject login\n            const decoded = jwt.verify(token, process.env.JWT_SECRET);\n\n            // get player's name\n            ({ name, email } = decoded.user);\n\n            // store the message in the database\n            await ChatModel.create({ email, message });\n          }\n\n          // emit the message to all players\n          this.io.emit('new-message', {\n            message,\n            name,\n            frame: this.players[socket.id].frame,\n          });\n        } catch (error) {\n          console.log(error.message);\n          socket.emit('invalidToken');\n        }\n      });\n\n      socket.on('playerMovement', (playerData) => {\n        if (this.players[socket.id]) {\n          this.players[socket.id].x = playerData.x;\n          this.players[socket.id].y = playerData.y;\n          this.players[socket.id].flipX = playerData.flipX;\n          this.players[socket.id].playerAttacking = playerData.playerAttacking;\n          this.players[socket.id].currentDirection = playerData.currentDirection;\n\n          // emit a message to all players about the player that moved\n          this.io.emit('playerMoved', this.players[socket.id]);\n        }\n      });\n\n      socket.on('player-dropped-item', (itemId) => {\n        this.players[socket.id].removeItem(itemId);\n        socket.emit('update-items', this.players[socket.id]);\n        socket.broadcast.emit('update-players-items', socket.id, this.players[socket.id]);\n      });\n\n      socket.on('pickup-item', (itemId) => {\n        // update the spawner\n        if (this.items[itemId]) {\n          if (this.players[socket.id].canPickupItem()) {\n            this.players[socket.id].addItem(this.items[itemId]);\n            socket.emit('update-items', this.players[socket.id]);\n            socket.broadcast.emit('update-players-items', socket.id, this.players[socket.id]);\n\n            // removing the item\n            this.spawners[this.items[itemId].spawnerId].removeObject(itemId);\n          }\n        }\n      });\n\n      socket.on('pickUpChest', (chestId) => {\n        // update the spawner\n        if (this.chests[chestId]) {\n          const { gold } = this.chests[chestId];\n\n          // updating the players gold\n          this.players[socket.id].updateGold(gold);\n          socket.emit('updateScore', this.players[socket.id].gold);\n          socket.broadcast.emit('update-players-score', socket.id, this.players[socket.id].gold);\n\n          // removing the chest\n          this.spawners[this.chests[chestId].spawnerId].removeObject(chestId);\n        }\n      });\n\n      socket.on('monsterAttacked', (monsterId) => {\n        // update the spawner\n        if (this.monsters[monsterId]) {\n          const { gold, attack } = this.monsters[monsterId];\n          const playerAttackValue = this.players[socket.id].attack;\n\n          // subtract health from monster model\n          this.monsters[monsterId].loseHealth(playerAttackValue);\n\n          // check the monster's health, if dead, remove it\n          if (this.monsters[monsterId].health <= 0) {\n            // updating the players gold\n            this.players[socket.id].updateGold(gold);\n            socket.emit('updateScore', this.players[socket.id].gold);\n\n            // removing the monster\n            this.spawners[this.monsters[monsterId].spawnerId].removeObject(monsterId);\n            this.io.emit('monsterRemoved', monsterId);\n\n            // add bonus health to the player\n            this.players[socket.id].updateHealth(15);\n            this.io.emit('updatePlayerHealth', socket.id, this.players[socket.id].health);\n          } else {\n            // update the player's health\n            this.players[socket.id].playerAttacked(attack);\n            this.io.emit('updatePlayerHealth', socket.id, this.players[socket.id].health);\n\n            // update the monster's health\n            this.io.emit('updateMonsterHealth', monsterId, this.monsters[monsterId].health);\n\n            // check the player's health, if below 0, have the player respawn\n            if (this.players[socket.id].health <= 0) {\n              // update the gold the player has\n              this.players[socket.id].updateGold(parseInt(-this.players[socket.id].gold / 2, 10));\n              socket.emit('updateScore', this.players[socket.id].gold);\n\n              // respawn the player\n              this.players[socket.id].respawn(this.players);\n              this.io.emit('respawnPlayer', this.players[socket.id]);\n            }\n          }\n        }\n      });\n\n      socket.on('player_attacked', (attackedPlayerId) => {\n        if (this.players[attackedPlayerId]) {\n          // get required info from attacked player\n          const { gold } = this.players[attackedPlayerId];\n          const playerAttackValue = this.players[socket.id].attack;\n\n          // subtract health from attacked player\n          this.players[attackedPlayerId].playerAttacked(playerAttackValue);\n\n          // check attacked player's health, if dead send gold to other player\n          if (this.players[attackedPlayerId].health <= 0) {\n            // get the amount of gold, and update player object\n            this.players[socket.id].updateGold(gold);\n\n            // respawn attacked player\n            this.players[attackedPlayerId].respawn(this.players);\n            this.io.emit('respawnPlayer', this.players[attackedPlayerId]);\n\n            // send update gold message to player\n            socket.emit('updateScore', this.players[socket.id].gold);\n\n            // reset the attacked player's gold\n            this.players[attackedPlayerId].updateGold(-gold);\n            this.io.to(`${attackedPlayerId}`).emit('updateScore', this.players[attackedPlayerId].gold);\n\n            // add bonus health to the player\n            this.players[socket.id].updateHealth(15);\n            this.io.emit('updatePlayerHealth', socket.id, this.players[socket.id].health);\n          } else {\n            this.io.emit('updatePlayerHealth', attackedPlayerId, this.players[attackedPlayerId].health);\n          }\n        }\n      });\n\n      // player connected to our game\n      console.log('player connected to our game');\n      console.log(socket.id);\n    });\n  }\n\n  setupSpawners() {\n    const config = {\n      spawnInterval: 3000,\n      limit: 3,\n      spawnerType: SpawnerType.CHEST,\n      id: '',\n    };\n    let spawner;\n\n    // create chest spawners\n    Object.keys(this.chestLocations).forEach((key) => {\n      config.id = `chest-${key}`;\n\n      spawner = new Spawner(\n        config,\n        this.chestLocations[key],\n        this.addChest.bind(this),\n        this.deleteChest.bind(this),\n      );\n      this.spawners[spawner.id] = spawner;\n    });\n\n    // create monster spawners\n    Object.keys(this.monsterLocations).forEach((key) => {\n      config.id = `monster-${key}`;\n      config.spawnerType = SpawnerType.MONSTER;\n\n      spawner = new Spawner(\n        config,\n        this.monsterLocations[key],\n        this.addMonster.bind(this),\n        this.deleteMonster.bind(this),\n        this.moveMonsters.bind(this),\n      );\n      this.spawners[spawner.id] = spawner;\n    });\n\n    // create item spawner\n    config.id = 'item';\n    config.spawnerType = SpawnerType.ITEM;\n    config.limit = 3;\n    config.spawnInterval = 1000 * 60 * 5;\n    spawner = new Spawner(\n      config,\n      this.itemLocations,\n      this.addItem.bind(this),\n      this.deleteItem.bind(this),\n    );\n    this.spawners[spawner.id] = spawner;\n  }\n\n  spawnPlayer(playerId, name, frame) {\n    const player = new PlayerModel(playerId, this.playerLocations, this.players, name, frame);\n    this.players[playerId] = player;\n  }\n\n  addChest(chestId, chest) {\n    this.chests[chestId] = chest;\n    this.io.emit('chestSpawned', chest);\n  }\n\n  deleteChest(chestId) {\n    delete this.chests[chestId];\n    this.io.emit('chestRemoved', chestId);\n  }\n\n  addMonster(monsterId, monster) {\n    this.monsters[monsterId] = monster;\n    this.io.emit('monsterSpawned', monster);\n  }\n\n  deleteMonster(monsterId) {\n    delete this.monsters[monsterId];\n    this.io.emit('monsterRemoved', monsterId);\n  }\n\n  moveMonsters() {\n    this.io.emit('monsterMovement', this.monsters);\n  }\n\n  addItem(itemId, item) {\n    this.items[itemId] = item;\n    this.io.emit('item-spawned', item);\n  }\n\n  deleteItem(itemId) {\n    delete this.items[itemId];\n    this.io.emit('item-removed', itemId);\n  }\n}\n"],"file":"GameManager.js"}